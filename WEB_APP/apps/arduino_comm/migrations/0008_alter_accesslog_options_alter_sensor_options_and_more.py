# Generated by Django 4.2.25 on 2025-10-30 20:36

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('arduino_comm', '0007_remove_syslogentry_ip_address_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='accesslog',
            options={'ordering': ['-server_timestamp'], 'verbose_name': 'Access Log', 'verbose_name_plural': 'Access Logs'},
        ),
        migrations.AlterModelOptions(
            name='sensor',
            options={'verbose_name': 'Sensor', 'verbose_name_plural': 'Sensors'},
        ),
        migrations.RenameField(
            model_name='accesslog',
            old_name='timestamp',
            new_name='server_timestamp',
        ),
        migrations.AlterUniqueTogether(
            name='sensor',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='accesslog',
            name='access_granted',
        ),
        migrations.AddField(
            model_name='accesslog',
            name='esp_timestamp',
            field=models.CharField(blank=True, help_text='ESP32 local timestamp (as string)', max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='accesslog',
            name='person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='arduino_comm.personal'),
        ),
        migrations.AddField(
            model_name='accesslog',
            name='result',
            field=models.CharField(choices=[('granted', 'Access Granted'), ('denied', 'Access Denied'), ('error', 'Unknown/Error')], default='error', max_length=16),
        ),
        migrations.AddField(
            model_name='accesslog',
            name='tag_uid',
            field=models.CharField(default='UNKNOWN', help_text='Raw UID of the tag used', max_length=100),
        ),
        migrations.AddField(
            model_name='sensor',
            name='id_sensor',
            field=models.CharField(default='UNKNOWN_SENSOR', help_text='Unique sensor ID reported by device', max_length=64),
        ),
        migrations.AddField(
            model_name='sensor',
            name='type',
            field=models.CharField(choices=[('readonly', 'Read-Only'), ('settable', 'Settable')], default='readonly', help_text='Whether sensor is passive (readonly) or can be written to', max_length=16),
        ),
        migrations.AddField(
            model_name='sensor',
            name='value_int',
            field=models.FloatField(default=-99999, help_text='Primary numeric value (e.g., temperature, state)'),
        ),
        migrations.AddField(
            model_name='sensor',
            name='value_text',
            field=models.CharField(blank=True, help_text="Optional textual info (e.g., 'Door open', 'Charging')", max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='accesslog',
            name='details',
            field=models.CharField(blank=True, help_text="Details like 'Tag not assigned', 'Access granted to John'", max_length=255),
        ),
        migrations.AlterField(
            model_name='sensor',
            name='last_updated',
            field=models.DateTimeField(auto_now=True, help_text='When the server last received an update'),
        ),
        migrations.AlterField(
            model_name='sensor',
            name='name',
            field=models.CharField(help_text='Human-readable sensor name', max_length=100),
        ),
        migrations.AlterField(
            model_name='sensor',
            name='number',
            field=models.PositiveIntegerField(blank=True, help_text='Optional pin number or internal reference', null=True),
        ),
        migrations.AlterField(
            model_name='sensor',
            name='status',
            field=models.CharField(default='OFFLINE', help_text='Sensor health/status, e.g., OK, OFFLINE, ERROR', max_length=50),
        ),
        migrations.AlterUniqueTogether(
            name='sensor',
            unique_together={('device', 'id_sensor')},
        ),
        migrations.DeleteModel(
            name='LED',
        ),
        migrations.RemoveField(
            model_name='sensor',
            name='value',
        ),
    ]
