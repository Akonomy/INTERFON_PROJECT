# Generated by Django 4.2.25 on 2025-10-17 12:17

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DEVICE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="A unique name for the device, e.g., 'Main_Entrance_ESP32'", max_length=100, unique=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, protocol='IPv4')),
                ('last_heartbeat', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=False)),
                ('wifi_signal_strength', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(0)])),
                ('api_key', models.CharField(blank=True, help_text='Secret key for device authentication', max_length=128, null=True, unique=True)),
                ('custom_field_1', models.CharField(blank=True, max_length=255, null=True)),
                ('custom_field_2', models.CharField(blank=True, max_length=255, null=True)),
                ('custom_field_3', models.CharField(blank=True, max_length=255, null=True)),
                ('custom_field_4', models.CharField(blank=True, max_length=255, null=True)),
                ('custom_field_5', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'DEVICE',
                'verbose_name_plural': 'DEVICES',
            },
        ),
        migrations.CreateModel(
            name='PERSONAL',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=200)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'PERSONAL',
                'verbose_name_plural': 'PERSONAL',
            },
        ),
        migrations.CreateModel(
            name='TAG',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(help_text='The unique identifier from the physical tag.', max_length=100, unique=True)),
                ('is_allowed', models.BooleanField(default=False, help_text='Check this box if the tag is currently allowed access.')),
                ('description', models.CharField(blank=True, help_text="Optional description, e.g., 'Main keychain fob'.", max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tags', to='arduino_comm.personal')),
            ],
            options={
                'verbose_name': 'TAG',
                'verbose_name_plural': 'TAGS',
            },
        ),
        migrations.CreateModel(
            name='AccessLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('access_granted', models.BooleanField()),
                ('details', models.CharField(blank=True, help_text="Additional details, e.g., 'Access Denied: Tag not allowed'.", max_length=255)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='access_logs', to='arduino_comm.device')),
                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='access_logs', to='arduino_comm.tag')),
            ],
            options={
                'verbose_name': 'Access Log',
                'verbose_name_plural': 'Access Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SENSOR',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Descriptive name, e.g., 'Door_Magnetic_Switch' or 'Room_Temperature'", max_length=100)),
                ('number', models.PositiveIntegerField(help_text='Pin number or identifier for the sensor on the device.')),
                ('status', models.CharField(default='OK', help_text="Operational status of the sensor, e.g., 'OK', 'ERROR', 'OFFLINE'.", max_length=50)),
                ('value', models.FloatField(blank=True, help_text='The last read value from the sensor.', null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensors', to='arduino_comm.device')),
            ],
            options={
                'verbose_name': 'SENSOR',
                'verbose_name_plural': 'SENSORS',
                'unique_together': {('device', 'number')},
            },
        ),
        migrations.CreateModel(
            name='LED',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Descriptive name, e.g., 'Status_Indicator_Green'", max_length=100)),
                ('number', models.PositiveIntegerField(help_text='Pin number or identifier for the LED on the device.')),
                ('state', models.IntegerField(choices=[(0, 'OFF'), (1, 'ON')], default=0, help_text='Current state of the LED (0=OFF, 1=ON).')),
                ('is_active', models.BooleanField(default=True, help_text='Is this LED configuration currently active?')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leds', to='arduino_comm.device')),
            ],
            options={
                'verbose_name': 'LED',
                'verbose_name_plural': 'LEDs',
                'unique_together': {('device', 'number')},
            },
        ),
    ]
